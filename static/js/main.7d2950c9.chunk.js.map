{"version":3,"sources":["logo.svg","components/Navbar.js","components/TextForm.js","components/About.js","components/Alert.js","App.js","reportWebVitals.js","index.js"],"names":["module","exports","__webpack_require__","p","Navbar","props","react_default","a","createElement","className","concat","mode","react_router_dom","to","title","type","data-bs-toggle","data-bs-target","aria-controls","aria-expanded","aria-label","id","aria-current","about","role","placeholder","onClick","toggleMode","htmlFor","TextForm","textLen","str","len","split","length","_useState","useState","_useState2","Object","slicedToArray","text","setText","Fragment","style","color","heading","backgroundColor","onChange","event","target","value","rows","newText","toUpperCase","showAlert","toLowerCase","About","aria-labelledby","data-bs-parent","defaultProps","Alert","alert","word","lower","charAt","slice","capitalize","msg","App","setMode","_useState3","_useState4","setAlert","message","setTimeout","document","body","components_Alert","react_router","exact","path","element","reportWebVitals","onPerfEntry","Function","e","then","bind","_ref","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","createRoot","getElementById","render","StrictMode","src_App"],"mappings":"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","file":"static/js/main.7d2950c9.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.06e73328.svg\";","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Link } from 'react-router-dom';\n\n\nexport default function Navbar(props) {\n    return (\n        <nav className={`navbar navbar-expand-lg bg-${props.mode} navbar-${props.mode}`}>\n            <div className=\"container-fluid\">\n                <Link className=\"navbar-brand\" to=\"/\">{props.title}</Link>\n                <button className=\"navbar-toggler\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#navbarSupportedContent\" aria-controls=\"navbarSupportedContent\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\n                    <span className=\"navbar-toggler-icon\"></span>\n                </button>\n                <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\n                    <ul className=\"navbar-nav me-auto mb-2 mb-lg-0\">\n                        <li className=\"nav-item\">\n                            <Link className=\"nav-link active\" aria-current=\"page\" to=\"/\">Home</Link>\n                        </li>\n                        <li className=\"nav-item\">\n                            <Link className=\"nav-link\" to=\"/about\">{props.about}</Link>\n                        </li>\n                    </ul>\n                    <form className=\"d-flex\" role=\"search\">\n                        <input className=\"form-control me-2\" type=\"search\" placeholder=\"Search\" aria-label=\"Search\" />\n                        <button className=\"btn btn-outline-primary\" type=\"submit\">Search</button>\n                    </form>\n                    <div className={`form-check form-switch mx-3 text-${props.mode==='light'? 'dark':'light'}`}>\n                        <input className=\"form-check-input\" type=\"checkbox\" role=\"switch\" onClick={props.toggleMode} id=\"flexSwitchCheckDefault\" />\n                        <label className=\"form-check-label\" htmlFor=\"flexSwitchCheckDefault\">Enable Dark Mode</label>\n                    </div>\n\n                </div>\n            </div>\n        </nav>\n    )\n}\n\nNavbar.propTypes={\n    title: PropTypes.string.isRequired,\n    about: PropTypes.string.isRequired\n}\nNavbar.defaultProps={\n    title: \"alternate title\",\n    about: \"alternate text\"\n}","import React,{ useState } from 'react'\n\n\nexport default function TextForm(props) {\n    const handleUpClick=() => {\n        let newText=text.toUpperCase();\n        setText(newText);\n        props.showAlert(\"Converted to UPPER CASE\",\"success\");\n    }\n    const handleLowClick=() => {\n        let newText=text.toLowerCase();\n        setText(newText);\n        props.showAlert(\"Converted to lower case\",\"success\");\n    }\n    const handleChange=(event) => {\n        setText(event.target.value);\n    }\n\n    const textLen=(str) => {\n        let len=str.split(\" \");\n        return len[len.length]==\" \"? len.length:len.length-1;\n\n    }\n    const [text,setText]=useState('');\n    return (\n        <>\n            <div className='container' style={{ color: props.mode==='dark'? 'white':'black' }}>\n                <div >\n                    <h1>{props.heading}</h1>\n                    <div className=\"mb-3\">\n                        <textarea className=\"form-control\" style={{ backgroundColor: props.mode==='dark'? 'black':'white',color: props.mode==='dark'? 'white':'black' }} id=\"myBox\" onChange={handleChange} value={text} rows=\"8\"></textarea>\n                    </div>\n                    <button className=\"btn btn-primary mx-3\" onClick={handleUpClick}>Convert to UPPERCASE</button>\n                    <button className=\"btn btn-success mx-3\" onClick={handleLowClick}>Convert to lowercase</button>\n                </div>\n                <div className=\"container my-3\">\n                    <h2>Your Text Summary</h2>\n                    <p>{textLen(text)} words and {text.length} characters</p>\n                    <p>{0.008*textLen(text)} minutes to read</p>\n                    <h4>Preview</h4>\n                    <p>{text.length>0? text:'Enter some text in the above textbox to be previewed'}</p>\n                </div>\n            </div>\n        </>\n    )\n}\n","import React,{ useState } from \"react\";\n\nexport default function About(props) {\n    return (\n        <div className=\"container\" style={{ backgroundColor: props.mode==='dark'? 'black':'white',color: props.mode==='dark'? 'white':'black' }}>\n            <h1 className=\"my-3\">About Us</h1>\n            <div className=\"accordion\" id=\"accordionExample\" >\n                <div className=\"accordion-item\" style={{ backgroundColor: props.mode==='dark'? 'black':'white',color: props.mode==='dark'? 'white':'black' }}>\n                    <h2 className=\"accordion-header\" id=\"headingOne\">\n                        <button className=\"accordion-button\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#collapseOne\" aria-expanded=\"true\" aria-controls=\"collapseOne\" style={{ backgroundColor: props.mode==='dark'? 'black':'white',color: props.mode==='dark'? 'white':'black' }}>\n                            Accordion Item #1\n                        </button>\n                    </h2>\n                    <div id=\"collapseOne\" className=\"accordion-collapse collapse show\" aria-labelledby=\"headingOne\" data-bs-parent=\"#accordionExample\">\n                        <div className=\"accordion-body\" style={{ backgroundColor: props.mode==='dark'? 'black':'white',color: props.mode==='dark'? 'white':'black' }}>\n                            <strong>This is the first item's accordion body.</strong> It is shown by default, until the collapse plugin adds the appropriate classNamees that we use to style each element. These classNamees control the overall appearance, as well as the showing and hiding via CSS transitions. You can modify any of this with custom CSS or overriding our default variables. It's also worth noting that just about any HTML can go within the <code>.accordion-body</code>, though the transition does limit overflow.\n                        </div>\n                    </div>\n                </div>\n                <div className=\"accordion-item\" style={{ backgroundColor: props.mode==='dark'? 'black':'white',color: props.mode==='dark'? 'white':'black' }}>\n                    <h2 className=\"accordion-header\" id=\"headingTwo\">\n                        <button className=\"accordion-button collapsed\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#collapseTwo\" aria-expanded=\"false\" aria-controls=\"collapseTwo\" style={{ backgroundColor: props.mode==='dark'? 'black':'white',color: props.mode==='dark'? 'white':'black' }}>\n                            Accordion Item #2\n                        </button>\n                    </h2>\n                    <div id=\"collapseTwo\" className=\"accordion-collapse collapse\" aria-labelledby=\"headingTwo\" data-bs-parent=\"#accordionExample\">\n                        <div className=\"accordion-body\" style={{ backgroundColor: props.mode==='dark'? 'black':'white',color: props.mode==='dark'? 'white':'black' }}>\n                            <strong>This is the second item's accordion body.</strong> It is hidden by default, until the collapse plugin adds the appropriate classNamees that we use to style each element. These classNamees control the overall appearance, as well as the showing and hiding via CSS transitions. You can modify any of this with custom CSS or overriding our default variables. It's also worth noting that just about any HTML can go within the <code>.accordion-body</code>, though the transition does limit overflow.\n                        </div>\n                    </div>\n                </div>\n                <div className=\"accordion-item\" style={{ backgroundColor: props.mode==='dark'? 'black':'white',color: props.mode==='dark'? 'white':'black' }}>\n                    <h2 className=\"accordion-header\" id=\"headingThree\">\n                        <button className=\"accordion-button collapsed\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#collapseThree\" aria-expanded=\"false\" aria-controls=\"collapseThree\" style={{ backgroundColor: props.mode==='dark'? 'black':'white',color: props.mode==='dark'? 'white':'black' }}>\n                            Accordion Item #3\n                        </button>\n                    </h2>\n                    <div id=\"collapseThree\" className=\"accordion-collapse collapse\" aria-labelledby=\"headingThree\" data-bs-parent=\"#accordionExample\" >\n                        <div className=\"accordion-body\" style={{ backgroundColor: props.mode==='dark'? 'black':'white',color: props.mode==='dark'? 'white':'black' }}>\n                            <strong>This is the third item's accordion body.</strong> It is hidden by default, until the collapse plugin adds the appropriate classNamees that we use to style each element. These classNamees control the overall appearance, as well as the showing and hiding via CSS transitions. You can modify any of this with custom CSS or overriding our default variables. It's also worth noting that just about any HTML can go within the <code>.accordion-body</code>, though the transition does limit overflow.\n                        </div>\n                    </div>\n                </div>\n            </div>\n        </div>\n    )\n}","import React from 'react'\n\nfunction Alert(props) {\n    const capitalize=(word) => {\n        const lower=word.toLowerCase();\n        return lower.charAt(0).toUpperCase()+lower.slice(1);\n    }\n    return (\n        props.alert&&<div className={`alert alert-${props.alert.type} alert-dismissible fade show`} role=\"alert\">\n            <strong>{capitalize(props.alert.type)}</strong>:{props.alert.msg}\n        </div>\n    )\n}\n\nexport default Alert","import logo from './logo.svg';\nimport './App.css';\nimport Navbar from './components/Navbar';\nimport TextForm from './components/TextForm';\nimport About from './components/About';\nimport React,{ useState } from 'react';\nimport Alert from './components/Alert';\nimport {\n  BrowserRouter as Router,\n  Routes,\n  Route,\n  Link\n} from 'react-router-dom';\n\nfunction App() {\n  const [mode,setMode]=useState('light');\n  const [alert,setAlert]=useState(null);\n\n  const showAlert=(message,type) => {\n    setAlert({\n      msg: message,\n      type: type\n    })\n    setTimeout(() => {\n      setAlert(null);\n    },600);\n  }\n  const toggleMode=() => {\n    if (mode==='dark') {\n      setMode('light');\n      document.body.style.backgroundColor='white';\n      showAlert(\"Light mode enabled\",\"success\");\n    }\n    else {\n      setMode('dark');\n      document.body.style.backgroundColor='black';\n      showAlert(\"Dark mode enabled\",\"success\");\n    }\n  }\n  return (\n    <>\n      <Router>\n        <Navbar title=\"My Utils\" about=\"About Us\" mode={mode} toggleMode={toggleMode} />\n        <Alert alert={alert} />\n        <Routes>\n          <Route exact path=\"/\" element={<TextForm showAlert={showAlert} heading=\" Enter your text here\" mode={mode} />} />\n          <Route exact path=\"/about\" element={<About mode={mode} />} />\n        </Routes>\n      </Router>\n\n    </>\n  );\n}\n\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render( \n    <React.StrictMode >\n    <App/>\n    </React.StrictMode>\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}